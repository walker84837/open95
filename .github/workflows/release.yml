name: Release

on:
  push:
    tags:
      - '*'

jobs:

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: aarch64-pc-windows-msvc
          - target: i686-pc-windows-msvc
          - target: x86_64-pc-windows-gnu

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}

    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-artifact
        path: target/${{ matrix.target }}/release
        if-no-files-found: error
        retention-days: 7
        compression-level: 6
        overwrite: true

  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
          - target: aarch64-unknown-linux-musl
          - target: i686-unknown-linux-gnu
          - target: i686-unknown-linux-musl
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}

    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-artifact
        path: target/${{ matrix.target }}/release
        if-no-files-found: error
        retention-days: 7
        compression-level: 6
        overwrite: true

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Upload Artifacts to Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for target in aarch64-pc-windows-msvc i686-pc-windows-msvc x86_64-pc-windows-gnu aarch64-unknown-linux-gnu aarch64-unknown-linux-musl i686-unknown-linux-gnu i686-unknown-linux-musl x86_64-unknown-linux-gnu x86_64-unknown-linux-musl; do
          asset_name="$target.zip"
          asset_path="artifacts/$target-artifact/$asset_name"
          curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/zip" \
               --data-binary "@$asset_path" \
               "${{ steps.create_release.outputs.upload_url }}?name=$asset_name"
        done
